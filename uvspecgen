#!/usr/bin/python
"""
#!/Library/Frameworks/Python.framework/Versions/Current/bin/python
"""

"""
UVSpecGen
Generate UV-Vis spectra from TDHF/TDDFT Gaussian output files.
"""

__version__ = '0.7'

# PROGRAM DEFAULTS 
# Gaussian fit parameters can be modified using the command-line options.
# To permanently change these values (make them default), update the
# variable definitions below.
defaults = dict(
    grid  = 0.02,
    range = 2.50,
    sigma = 0.12,
    shift = 0.00)


# MODULES

import argparse as arg
from math import e
from datetime import datetime


# CLASSES

class CommandLineInput():
    """Process command-line input and generate help documentation.

    An instance of this class parses command-line input and provides program
    help documentation.  All needed user-input is handled with this class,
    including input/output file names and fit parameters.

    """
    def __init__(self, version=__version__, default=defaults):
        self.header = '%(prog)s' + ' ' + version
        self.input = self.parse_command_line_input(self.header, default)
        self.logfile = self.input.logfile
        self.outfile = self.input.outfile
        self.output = self.input.output
        self.nometa = self.input.nometa
        self.plot = self.input.plot
        self.parameters = dict(
            grid = self.input.grid,
            range = self.input.range,
            sigma = self.input.sigma,
            shift = self.input.shift)


    def parse_command_line_input(self, header, default):
        """Create an ArgumentParser object and define program options.

        The default dictionary contains the default values for several
        parameters required to perform the Gaussian fit.  The dictionary
        is defined at the top of this file so that users may easily set
        the default values themself.  Additionally, the dictionary allows
        a single object to be passed into the CommandLineInput class and
        the herein described function.

        """
        parser = arg.ArgumentParser(
            formatter_class = arg.ArgumentDefaultsHelpFormatter,
            description = 'Generate UV-Vis spectrum from TDHF/TDDFT data',
            epilog = 'Report bugs to <gaussiantoolkit@gmail.com>')
        
        # Required positional argument, the input (.log) file
        parser.add_argument(
            'logfile',
            help = 'Gaussian logfile')
        
        # Optional positional argument, the output file name; option to modify
        # output data
        parser.add_argument(
            'outfile',
            nargs = '?',
            default = '<logfile>.spec.txt',
            help = 'specify output filename, .spec.txt will be appended')
        parser.add_argument(
            '-o',
            '--output',
            default = 'both',
            choices = ['both', 'curve', 'sticks'],
            help = 'specify results to print in output file')
        parser.add_argument(
            '--nometa',
            default = 'False',
            action = 'store_true',
            help = 'do not print spectrum meta data to output file')
        
        # Optional arguments, to modify the parameters of the Gaussian fit
        parser.add_argument(
            '-g',
            '--grid',
            default = default['grid'],
            type = float,
            help = 'set grid spacing value for the Gaussian curve')
        parser.add_argument(
            '-r',
            '--range',
            default = default['range'],
            type = float,
            help = 'set the spacing below and above the smallest and largest\
                    excited state energy for plotting')
        parser.add_argument(
            '-s',
            '--sigma',
            default = default['sigma'],
            type = float,
            help = 'set value for Gaussian broadening constant sigma')
        parser.add_argument(
            '--shift',
            default = default['shift'],
            type = float,
            help = 'set shift for the starting point of the Gaussian curve')

        # Optional flag to plot the spectrum using matplotlib, if available
        parser.add_argument(
            '-p',
            '--plot',
            action = 'store_true',
            help = 'display a plot of the absorbance spectrum if matplotlib\
                    is available')
        
        # Print program version
        parser.add_argument(
            '--version',
            action = 'version',
            version = header)
        args = parser.parse_args()
        return args


class AbsorbanceSpectrum:
    def __init__(self, logfile, params):
        self.logfile_name = logfile
        self.grid = params['grid']
        self.sigma = params['sigma']
        self.shift = params['shift']
        self.plot_range = params['range']
        self.time = get_time() 
        
        self.meta_data_tags = ['Logfile:', 'Sigma:', 'Grid:', 'Shift:',
                               'Range:', 'Created:']
        self.meta_data = [self.logfile_name, self.sigma, self.grid, self.shift,
                          self.plot_range, self.time]

        self.energy = [] 
        self.intensity = []
        self.absorbance = []                                    
        self.excited_state = []                                 

    def get_excited_states(self):
        """Read in the excited states and oscillator strengths.
        
        Read each line of the logfile looking for the 'Excited State'
        keyword at the beginning of the line.  Extracts the excited state
        energy and oscillator strength and stores the values in the
        appropriate list.
    
        """
        with open(self.logfile_name) as logfile:
            for line in logfile:                                
                if line.startswith(' Excited State '):      
                    words = line.split(' ')
                    words = delspaces(words)
                    self.excited_state += [float(words[4])]
                    self.intensity += [float(words[8][2:])]
    
    def generate_spectrum(self):
        """Fit the sticks with Gaussians to generate line shape.
    
        Given the lists excited_state and intensity, this function generates
        a grid of energy data points separated by grid between the
        range plot_range above and below the largest and smallest energy 
        excited states.  The excited state peaks are then fit with Gaussian
        functions, which are summed together to give the final absorbance.
        The lists energy and absorbance are populated with the data from the
        fit.
        
        """
        # Range of graph/output is between plot_range less than the smallest
        # excited state energy and plot_range greater than the largest excited
        # state energy 
        max_energy = self.plot_range + max(self.excited_state) 
        min_energy = min(self.excited_state) - self.plot_range
        point = min_energy
        
        # Generate grid of energy points for the absorbance spectrum
        while point <= max_energy:
            self.energy.append(point)
            point += self.grid
    
        # For every grid point in the energy list, compute the absorbance
        # according to the following equation:
        #   Abs(X) = SUM_{S} Int_{S} * EXP[-0.5 * [(X + SFT - ES_{S}) /
        #              SIG ]**2]
        # where the absorbance, Abs, is a sum of Gaussian functions fit to
        # each S excited state and is a function of the energy, X.  Int is
        # the intensity, SFT is the shift, ES is the excited state, and SIG
        # is the sigma broadening constant.
        for point in self.energy:
            absorb_fit = 0.0
            for state in range(len(self.excited_state)):
                absorb_fit += self.intensity[state]*e**(-0.5*((point +
                                self.shift - self.excited_state[state])**2)/
                                (self.sigma**2))
            self.absorbance.append(absorb_fit)
            
    def create_outfile(self, outfile_name):
        """Write the output file.
    
        Write the UV-Vis stick spectrum and line shape data to the output file. 
    
        """
        # Setup print control flags; by default, everything is printed
        printout = dict(curve=True, sticks=True, meta=True) 
        if options.output == "curve":
            printout['sticks'] = False
        if options.output == "sticks":
            printout['curve'] = False 
        if options.nometa == True:
            printout['meta'] = False 
        
        # Determine number of lines to print
        if printout['curve']:
            lines_to_print = len(self.energy)
        elif printout['meta']:
            lines_to_print = max(len(self.excited_state),
                                 len(self.meta_data_tags))
        else:
            lines_to_print = len(self.excited_state)

        # Create the output file
        outfile = open(outfile_name, 'w')

        for i in range(lines_to_print):
            header_line = []
            current_line = []
            if printout['curve']: 
                if i == 0:
                    header = '%(energy)15s %(intensity)19s' % \
                              {'energy': 'Energy (eV)', \
                               'intensity': 'Intensity (au)'}
                    header_line.append(header)
                
                line = '%(energy)15.3F %(intensity)19.5F' % \
                        {'energy': self.energy[i], \
                         'intensity': self.absorbance[i]}
                current_line.append(line)

            if printout['sticks']: 
                if i == 0:
                    header = '%(state)8s %(energy)15s %(intensity)19s' % \
                              {'state': 'State', 'energy': 'Energy (eV)', \
                               'intensity': 'Intensity (au)'}
                    header_line.append(header)
               
                if i < len(self.excited_state):
                    line = '%(state)8i %(energy)15.3F %(intensity)19.5F' % \
                            {'state': i+1, 'energy': self.excited_state[i], \
                             'intensity': self.intensity[i]}
                elif i < len(self.meta_data_tags):
                    line = '%44s' % ' '
                else:
                    line = ''
                current_line.append(line)
            
            if printout['meta'] and i < len(self.meta_data_tags):
                line = '%(tag)15s %(value)20s' % \
                        {'tag': self.meta_data_tags[i], \
                         'value': self.meta_data[i]}
                current_line.append(line)

            if i == 0:
                header_line.append('\n')
                outfile.write(' '.join(header_line))
            current_line.append('\n')
            outfile.write(' '.join(current_line))
        
        outfile.close()
    
    def plot_spectrum(self):
        """Visualize a plot of the absorbance data.
        
        Plot the absorbance spectrum as A versus Evec with appropriate axis
        labels.  The matplotlib module is not distributed as part of the
        Python Standard Library, so performa a check to determine if the
        module is available.
    
        """
        try:
            import matplotlib.pyplot as plt 
            plt.xlabel("Energy (eV)")
            plt.ylabel("Oscillator strength")
            plt.plot(self.energy, self.absorbance, 'k')
            plt.show()
        except ImportError:
            print '  [ERROR] matplotlib.pylot is required to plot the spectrum'


# LOCAL FUNCTIONS

def get_time():
    """Return the date and time of program execution as MM-DD-YYYY @ HH:MM."""
    dt = datetime.now()
    mth = dt.month
    day = dt.day
    yr = dt.year
    hr = dt.hour
    mnt = dt.minute
    time_stamp = '%(month)02i-%(day)02i-%(year)4i @ %(hour)02i:%(minute)02i' %\
            {'month': mth, 'day': day, 'year': yr, 'hour': hr, 'minute': mnt}
    return time_stamp 

def generate_outfile_name():
    """Generate the output filename with .spec.txt extension."""
    global outfile_name
    if options.outfile == "<logfile>.spec.txt":
        outfile_name = logfile_name[:-3]+'spec.txt'
    else:
        outfile_name = options.outfile + ".spec.txt"

def delspaces(L):
    """Remove all items in a list containing only empty strings."""
    if len(L)==0:
        return L
    elif L[0]=='':
        return delspaces(L[1:])
    elif L[0]!='':
        return [L[0]] + delspaces(L[1:])
    

# MAIN PROGRAM

options = CommandLineInput()
logfile_name = options.logfile
generate_outfile_name()
parameters = options.parameters
make_plot = options.plot

spectrum = AbsorbanceSpectrum(logfile_name, parameters)
spectrum.get_excited_states()
spectrum.generate_spectrum()
spectrum.create_outfile(outfile_name)

if make_plot:
    spectrum.plot_spectrum()

print '  Spectrum generation complete: output written to %s' % outfile_name
